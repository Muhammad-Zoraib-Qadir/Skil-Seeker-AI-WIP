{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zorai\\\\OneDrive\\\\Desktop\\\\SKILLSEEKER\\\\frontend\\\\src\\\\components\\\\SkillsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto'; // Use /auto to register all controllers and scales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SkillsChart = ({\n  professional,\n  category\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    // Generate chart data based on professional and category\n    if (professional) {\n      let labels = [];\n      let data = [];\n\n      // Determine what data to display based on category\n      if (category && category.includes('Medical')) {\n        labels = ['Expertise', 'Experience', 'Reputation', 'Availability', 'Patient Reviews'];\n        // Generate random scores between 70 and 100 for demo purposes\n        data = [Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70];\n      } else if (category && category.includes('Legal')) {\n        labels = ['Expertise', 'Case Success', 'Experience', 'Reputation', 'Client Reviews'];\n        data = [Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70];\n      } else if (category && category.includes('CS')) {\n        labels = ['Technical Skills', 'Problem Solving', 'Communication', 'Project Management', 'Code Quality'];\n        data = [Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70];\n      } else {\n        labels = ['Expertise', 'Experience', 'Service Quality', 'Value', 'Customer Satisfaction'];\n        data = [Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70, Math.floor(Math.random() * 30) + 70];\n      }\n      setChartData({\n        labels,\n        data\n      });\n    }\n  }, [professional, category]);\n  useEffect(() => {\n    // Create or update chart when data changes\n    if (chartData && chartRef.current) {\n      // Destroy previous chart instance if it exists\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n\n      // Create new chart\n      const ctx = chartRef.current.getContext('2d');\n      chartInstance.current = new Chart(ctx, {\n        type: 'radar',\n        data: {\n          labels: chartData.labels,\n          datasets: [{\n            label: 'Skills Rating',\n            data: chartData.data,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 2,\n            pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(54, 162, 235, 1)'\n          }]\n        },\n        options: {\n          scales: {\n            r: {\n              angleLines: {\n                display: true\n              },\n              suggestedMin: 0,\n              suggestedMax: 100\n            }\n          },\n          plugins: {\n            title: {\n              display: true,\n              text: 'Professional Skills Profile',\n              font: {\n                size: 16\n              }\n            },\n            legend: {\n              display: false\n            }\n          },\n          maintainAspectRatio: false\n        }\n      });\n    }\n\n    // Cleanup function to destroy chart when component unmounts\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skills-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Skills Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '300px',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(SkillsChart, \"Z6tWI4JrOQQa4O64OWbZev42H4g=\");\n_c = SkillsChart;\nexport default SkillsChart;\nvar _c;\n$RefreshReg$(_c, \"SkillsChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","SkillsChart","professional","category","_s","chartRef","chartInstance","chartData","setChartData","labels","data","includes","Math","floor","random","current","destroy","ctx","getContext","type","datasets","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","options","scales","r","angleLines","display","suggestedMin","suggestedMax","plugins","title","text","font","size","legend","maintainAspectRatio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","ref","_c","$RefreshReg$"],"sources":["C:/Users/zorai/OneDrive/Desktop/SKILLSEEKER/frontend/src/components/SkillsChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Chart from 'chart.js/auto';  // Use /auto to register all controllers and scales\r\n\r\nconst SkillsChart = ({ professional, category }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Generate chart data based on professional and category\r\n    if (professional) {\r\n      let labels = [];\r\n      let data = [];\r\n      \r\n      // Determine what data to display based on category\r\n      if (category && category.includes('Medical')) {\r\n        labels = ['Expertise', 'Experience', 'Reputation', 'Availability', 'Patient Reviews'];\r\n        // Generate random scores between 70 and 100 for demo purposes\r\n        data = [\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n        ];\r\n      } else if (category && category.includes('Legal')) {\r\n        labels = ['Expertise', 'Case Success', 'Experience', 'Reputation', 'Client Reviews'];\r\n        data = [\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n        ];\r\n      } else if (category && category.includes('CS')) {\r\n        labels = ['Technical Skills', 'Problem Solving', 'Communication', 'Project Management', 'Code Quality'];\r\n        data = [\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n        ];\r\n      } else {\r\n        labels = ['Expertise', 'Experience', 'Service Quality', 'Value', 'Customer Satisfaction'];\r\n        data = [\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n          Math.floor(Math.random() * 30) + 70,\r\n        ];\r\n      }\r\n      \r\n      setChartData({ labels, data });\r\n    }\r\n  }, [professional, category]);\r\n\r\n  useEffect(() => {\r\n    // Create or update chart when data changes\r\n    if (chartData && chartRef.current) {\r\n      // Destroy previous chart instance if it exists\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n      \r\n      // Create new chart\r\n      const ctx = chartRef.current.getContext('2d');\r\n      chartInstance.current = new Chart(ctx, {\r\n        type: 'radar',\r\n        data: {\r\n          labels: chartData.labels,\r\n          datasets: [{\r\n            label: 'Skills Rating',\r\n            data: chartData.data,\r\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 2,\r\n            pointBackgroundColor: 'rgba(54, 162, 235, 1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(54, 162, 235, 1)'\r\n          }]\r\n        },\r\n        options: {\r\n          scales: {\r\n            r: {\r\n              angleLines: {\r\n                display: true\r\n              },\r\n              suggestedMin: 0,\r\n              suggestedMax: 100\r\n            }\r\n          },\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: 'Professional Skills Profile',\r\n              font: {\r\n                size: 16\r\n              }\r\n            },\r\n            legend: {\r\n              display: false\r\n            }\r\n          },\r\n          maintainAspectRatio: false\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Cleanup function to destroy chart when component unmounts\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n    };\r\n  }, [chartData]);\r\n\r\n  return (\r\n    <div className=\"skills-chart\">\r\n      <h3>Skills Profile</h3>\r\n      <div className=\"chart-container\" style={{ height: '300px', width: '100%' }}>\r\n        <canvas ref={chartRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SkillsChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}